{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kanga\\\\IBM Acc Projects\\\\to-do-list_week1-pineappleEnthusiast\\\\src\\\\component\\\\todos.js\";\nimport React from \"react\";\nimport \"../component/todos.css\";\nimport { Card, CardContent, Grid, ListItemButton, ListItemText, Checkbox } from \"@mui/material\"; // 1. This component formats and returns the list of todos.\n// 2. Treat the question mark like an if statement.\n// If the todos array has items in the list [todos.length], we want to return the list\n// Else, return a message saying \"You have no todo's left\"\n// 3. The map function is called to assign each array item with a key\n// 4. Think of lines 14-23 as a loop. For each todo in the todo list, we want to give the list item\n// a key, and it's own card shown in the UI\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Todos = _ref => {\n  let {\n    todos\n  } = _ref;\n  const todoList = todos.length ? todos.map(todo => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [todo.content, /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              padding: \"50px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this)\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }, this);\n  }) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"You have no todo's left to complete\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 7\n  }, this); // Lastly, return the todoList constant that we created above to show all of the items on the screen.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoCollection\",\n    style: {\n      padding: \"10px\"\n    },\n    children: todoList\n    /*call todo list here*/\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 7\n  }, this);\n};\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"names":["React","Card","CardContent","Grid","ListItemButton","ListItemText","Checkbox","Todos","todos","todoList","length","map","todo","content","padding","id"],"sources":["C:/Users/kanga/IBM Acc Projects/to-do-list_week1-pineappleEnthusiast/src/component/todos.js"],"sourcesContent":["import React from \"react\";\r\nimport \"../component/todos.css\";\r\nimport {Card, CardContent, Grid, ListItemButton, ListItemText, Checkbox} from \"@mui/material\";\r\n\r\n// 1. This component formats and returns the list of todos.\r\n// 2. Treat the question mark like an if statement.\r\n// If the todos array has items in the list [todos.length], we want to return the list\r\n// Else, return a message saying \"You have no todo's left\"\r\n// 3. The map function is called to assign each array item with a key\r\n// 4. Think of lines 14-23 as a loop. For each todo in the todo list, we want to give the list item\r\n// a key, and it's own card shown in the UI\r\nconst Todos = ({ todos }) => {\r\n    const todoList = todos.length ? (\r\n      todos.map((todo) => {\r\n        return (\r\n          <Grid key={todo.id}>\r\n            <Card>\r\n              <CardContent>\r\n              {todo.content}\r\n                <span style={{ padding: \"50px\" }}>{}</span>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        );\r\n      })\r\n    ) : (\r\n      <p>{\"You have no todo's left to complete\"}</p>\r\n    );\r\n    // Lastly, return the todoList constant that we created above to show all of the items on the screen.\r\n    return (\r\n      <div className=\"todoCollection\" style={{ padding: \"10px\" }}>\r\n        {todoList/*call todo list here*/}\r\n      </div>\r\n    );\r\n};\r\n  \r\nexport default Todos;\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;AACA,SAAQC,IAAR,EAAcC,WAAd,EAA2BC,IAA3B,EAAiCC,cAAjC,EAAiDC,YAAjD,EAA+DC,QAA/D,QAA8E,eAA9E,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,KAAK,GAAG,QAAe;EAAA,IAAd;IAAEC;EAAF,CAAc;EACzB,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,GACfF,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAU;IAClB,oBACE,QAAC,IAAD;MAAA,uBACE,QAAC,IAAD;QAAA,uBACE,QAAC,WAAD;UAAA,WACCA,IAAI,CAACC,OADN,eAEE;YAAM,KAAK,EAAE;cAAEC,OAAO,EAAE;YAAX;UAAb;YAAA;YAAA;YAAA;UAAA,QAFF;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF,GAAWF,IAAI,CAACG,EAAhB;MAAA;MAAA;MAAA;IAAA,QADF;EAUD,CAXD,CADe,gBAcf;IAAA,UAAI;EAAJ;IAAA;IAAA;IAAA;EAAA,QAdF,CADyB,CAiBzB;;EACA,oBACE;IAAK,SAAS,EAAC,gBAAf;IAAgC,KAAK,EAAE;MAAED,OAAO,EAAE;IAAX,CAAvC;IAAA,UACGL;IAAQ;;EADX;IAAA;IAAA;IAAA;EAAA,QADF;AAKH,CAvBD;;KAAMF,K;AAyBN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}